{-# OPTIONS --type-in-type #-}

{-
  This module is an `.agda-sketch` file: the purpose of this file is to loosely
  sketch the core details of a proof, whose complete formalization would be
  impractical or simply not worth the time investment.

  NOTE: we use type-in-type since we encounter some problems in the definition of
  relative adjunction as it is defined in `agda-categories`, since it is probably
  too restrictive on the universe levels of the functors involved.

  Although the informal proof is obvious, we do not complete the formal proof here for the
  following reasons:
  - We would have to define the notion of relative adjunction between *para*categories,
  - even typechecking this partially completed proof takes an incredible amount of time,
  - the informal proof is sufficiently spelled out in detail to convince the reader.

  In particular, the development here focuses on the following points:
  - there *is* a functorial action between the functors involved,
  - the maps that need to provide are familiar and they are provided as in previous files.

  The second point is the most important one, which we check in this proof, and the
  maps provided are indeed exactly the same given in `Dinaturality.J` (with some degenerate choices of dipresheaves).

  The first point is particularly delicate since, when trying to make sense of the relative
  adjunction, it is easy to come across a situation in which there is a (para)functor defined on objects
  but not on morphisms. We show here that the parafunctors of the relative adjunction are reasonable:
  they always go *from* naturals *into* dinaturals, whereas the opposite direction would be problematic.
-}

module Dinaturality.Sketch.HomRelativeAdjunction {o ℓ e} where

open import Level using (Level; _⊔_; Lift; lift) renaming (zero to zeroℓ; suc to sucℓ)

import Data.Unit
open import Categories.Category
open import Categories.Category.BinaryProducts using (BinaryProducts; module BinaryProducts)
open import Categories.Category.Cartesian using (Cartesian)
open import Categories.Adjoint.Relative using (RelativeAdjoint)
open import Categories.Category.CartesianClosed using (CartesianClosed)
open import Categories.Category.Construction.Functors using (Functors; eval; curry; uncurry)
open import Categories.Category.Instance.One using (One; One-⊤)
open import Categories.Category.Instance.SingletonSet using (SingletonSetoid; SingletonSetoid-⊤)
open import Categories.Category.Instance.Properties.Setoids using (Setoids-CCC)
open import Categories.Category.Instance.Setoids using (Setoids)
open import Categories.Category.Product using (Product; πˡ; πʳ; _⁂_; _※_; assocˡ; assocʳ; Swap)
open import Categories.Functor using (_∘F_; Functor) renaming (id to idF)
open import Categories.Category.Construction.Presheaves using (CoPresheaves′)
open import Categories.Functor.Bifunctor.Properties using ([_]-decompose₁; [_]-decompose₂; [_]-merge; [_]-commute)
open import Categories.Functor.Construction.Constant using (const)
open import Categories.Functor.Hom using (Hom[_][-,-])
open import Categories.Functor.Properties using ([_]-resp-square)
open import Categories.Morphism using (_≅_)
open import Categories.NaturalTransformation.Core using (NaturalTransformation; ntHelper)
open import Categories.NaturalTransformation.Equivalence renaming (_≃_ to _≃ⁿ_)
open import Categories.NaturalTransformation.Dinatural using (DinaturalTransformation; dtHelper) renaming (_≃_ to _≃ᵈ_)
open import Categories.NaturalTransformation.StrongDinatural using (StrongDinaturalTransformation; _≃ˢ_)
open import Categories.NaturalTransformation.NaturalIsomorphism using (_≃_; niHelper; NaturalIsomorphism)
open import Categories.Object.Terminal using (Terminal)
open import Data.List using ([]; _∷_)
open import Data.Product using (_,_; proj₁; proj₂) renaming (_×_ to _×′_)
open import Data.Product.Function.NonDependent.Setoid using (proj₁ₛ; proj₂ₛ; <_,_>ₛ)
open import Data.Unit.Polymorphic renaming (⊤ to ⊤′)
open import Function using () renaming (id to idf; _∘_ to _⟨∘⟩_)
open import Function.Bundles using (Func; _⟨$⟩_)
open import Function.Construct.Composition using (function)
open import Relation.Binary.Bundles using (Setoid)
open import Relation.Binary.PropositionalEquality as Eq using (_≡_; refl; cong₂; trans; cong; sym)
open import Relation.Binary.Construct.Closure.Equivalence using (isEquivalence; EqClosure; setoid; return; join; map; gmap; fold; gfold)

open NaturalTransformation using (η)
open Functor using (F₀; ₁; homomorphism; F-resp-≈)
open Category using (op)

import Categories.Morphism.Reasoning as MR
import Relation.Binary.Reasoning.Setoid as RS

import Reason
import Dinaturality.Reindexing using (squash)

private
  variable
    -- o ℓ e : Level
    A B C D Γ Δ Γ′ Γ″ Γᵒᵖ Δᵒᵖ : Category o ℓ e

infixr 5 _⊗_
infixr 5 _$_

private
  _⊗_ = Product
  _$_ = _⟨$⟩_

F-swap : Functor (A ⊗ B ⊗ C) (B ⊗ A ⊗ C)
F-swap = assocˡ _ _ _ ∘F (Swap ⁂ idF) ∘F assocʳ _ _ _

F-reorder : Functor (op A ⊗ A ⊗ op B ⊗ C) (op (A ⊗ B) ⊗ A ⊗ C)
F-reorder = assocʳ _ _ _ ∘F (idF ⁂ F-swap)

private
  variable
    F G H I J K L : Functor (op Γᵒᵖ ⊗ Γ) (Setoids ℓ ℓ)

private
  module Set {ℓ} = CartesianClosed (Setoids-CCC ℓ)
  module SetC {ℓ} = Cartesian (Set.cartesian {ℓ})
  module SetA {ℓ} = BinaryProducts (SetC.products {ℓ})
  module SetT {ℓ} = Terminal (SetC.terminal {ℓ})
  module F-⊤ {o} {ℓ} {e} = Terminal (One-⊤ {o} {ℓ} {e})

pattern * = lift Data.Unit.tt

-- modifier on a single variable
pos = πʳ
neg = πˡ

-- series of variables
positives = πʳ
negatives = πˡ

-- variables out of 2-tuple

va = πˡ
vb = πʳ

-- variables out of 3-tuple

v1 = πˡ

v2 : Functor (Product A (Product B C)) B
v2 = πˡ ∘F πʳ

v3 : Functor (Product A (Product B C)) C
v3 = πʳ ∘F πʳ

------------------------------------------------------------------------------------------

Dinats : (C : Category o ℓ e) → Category (o ⊔ sucℓ ℓ ⊔ e) (o ⊔ sucℓ ℓ ⊔ e) (o ⊔ ℓ)
Dinats C = record
  { Obj = Functor (op C ⊗ C) (Setoids ℓ ℓ)
  ; _⇒_ = DinaturalTransformation
  ; _≈_ = _≃ᵈ_
  ; id = {!   !}
  ; _∘_ = {!   !}
  ; assoc = {!   !}
  ; sym-assoc = {!   !}
  ; identityˡ = {!   !}
  ; identityʳ = {!   !}
  ; identity² = {!   !}
  ; equiv = {!   !}
  ; ∘-resp-≈ = {!   !}
  }

hom×- : {C : Category ℓ ℓ ℓ}
       → Functor (CoPresheaves′ ℓ ℓ (One {o = ℓ} {ℓ = ℓ} {e = ℓ})) (CoPresheaves′ ℓ ℓ (op C ⊗ C))
hom×- {C = C} = record
  { F₀ = λ F → SetA.-×- ∘F ((Hom[ _ ][-,-] ∘F (va ※ vb)) ※ F ∘F F-⊤.!)
  ; F₁ = λ {F} {G} α →
    let module α = NaturalTransformation α in
    let module C = Reason C in
    ntHelper record
    { η = λ { (A , B) → record
      { to = λ { (f , k) →
         f , α.η * $ k
         }
      ; cong = {!   !}
      } }
    ; commute = {! α.commute  !}
    }
  ; identity = {!   !}
  ; homomorphism = {!   !}
  ; F-resp-≈ = {!   !}
  }

Δ×- : {C : Category ℓ ℓ ℓ}
       → Functor (CoPresheaves′ ℓ ℓ (op C ⊗ C)) (Dinats C)
Δ×- = record
  { F₀ = λ F → F
  ; F₁ = {!   !}
  ; identity = {!   !}
  ; homomorphism = {!   !}
  ; F-resp-≈ = {!   !}
  }

π⁺⁻ : {C : Category ℓ ℓ ℓ}
       → Functor (CoPresheaves′ ℓ ℓ (One {o = ℓ} {ℓ = ℓ} {e = ℓ})) (Dinats C)
π⁺⁻ {C = C} = record
  { F₀ = λ F → F ∘F F-⊤.!
  ; F₁ = λ {F} {G} → {!   !}
  ; identity = {!   !}
  ; homomorphism = {!   !}
  ; F-resp-≈ = {!   !}
  }

hom-relative-adjunction : ∀ {o ℓ e} {C : Category o ℓ e}
   → RelativeAdjoint
      {C = Dinats C} ((CoPresheaves′ ℓ ℓ (op C ⊗ C))) (π⁺⁻ {C = C})
hom-relative-adjunction {C = C} = record
  { L = hom×- {C = C}
  ; R = Δ×- {C = C}
  ; Hom-NI = record
    { F⇒G =
    record
      { η = λ { (F , G) → record
        { to = λ x → record
          { η = λ { (A , B) → record
            { to = λ { (f , p) → Functor.F₁ G (Category.id C , f) $ DinaturalTransformation.α x A $ p  }
            ; cong = {!   !}
            } }
          ; commute = {!   !}
          ; sym-commute = {!   !}
          }
        ; cong = {!   !}
        } }
      ; commute = {!   !}
      ; sym-commute = {!   !}
      }
    ; F⇐G =
     record
      { η = λ { (F , G) → record
        { to = λ x → record { α = λ C → record { to = λ x₁ → NaturalTransformation.η x (C , C) $ (Category.id _ , x₁) ; cong = {!   !} } ; commute = {!   !} ; op-commute = {!   !} }
        ; cong = {!   !}
        } }
      ; commute = {!   !}
      ; sym-commute = {!   !}
      }
    ; iso = {!   !}
    }
  }
